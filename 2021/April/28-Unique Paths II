class Solution {
public:
    int dp[105][105], fr[2]={1,0},fc[2]={0,1}, m, n;
        
    int go(int r, int c, vector<vector<int>> obstacleGrid){
        int &ret = dp[r][c];
        if(dp[r][c] != -1) return ret;
        else ret = 0;
        for(int i=0;i<2;i++){
            int nr = r + fr[i], nc = c + fc[i];
            if(nr >= n || nc >= m || obstacleGrid[nr][nc]) continue;
            ret += go(nr,nc,obstacleGrid);
        }
        return ret;
    }
        
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0]) return 0;
        n = obstacleGrid.size(), m = obstacleGrid[0].size();
        for(int i=0;i<n;i++) for(int j=0;j<m;j++) dp[i][j] = -1;
        dp[n-1][m-1] = 1;
        go(0,0,obstacleGrid);
        return dp[0][0];
    }
};
